{"version":3,"sources":["pseudo-system/consts.js","pseudo-system/basic.js","pseudo-system/db.js","pseudo-system/indexDb.js","pseudo-system/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["version","displayName","CURRENT_DIR","PARENT_DIR","HOME_DIR","STORAGE_KEY","DIR","FILE","HOME_PATH","has","obj","key","configPlugin","pathSeporator","toStringPath","path","stringParts","parts","isDir","push","isRoot","unshift","join","PseudoFileSystem","decorate","memoize","autobind","api","config","commands","cd","enterDir","ls","listDirContents","rm","removeFromFileSystemCommand","mkdir","createDirCommand","touch","createFileCommand","cat","runCat","echo","runEcho","descriptions","getPublicMethods","parsePath","isValidPath","cb","createDir","createFile","removeDir","remove","removeFile","readDir","getContents","readFile","file","contents","writeFile","writeToFile","pathToString","types","dir","currentPath","_","setTimeout","method","split","baseIsASymbol","indexOf","length","modPath","filter","part","slice","i","this","doParse","last","getData","printLine","str","Object","keys","data","setData","set","args","newPath","setPromptPrefix","parentDir","newDir","addToFileSystem","name","type","newFile","undefined","recursive","options","description","defaultValue","pathA","trim","pathB","flag","splitName","lang","langMap","languages","language","style","syntaxStyles","values","item","map","styles","color","marginRight","width","display","marginBottom","title","toUpperCase","PluginBase","defaultData","home","user","clear","Dexie","delete","db","stores","folders","files","superBlock","inodesList","SuperBlock","blockSize","blocksTotal","fileSysSize","inodeListSize","freeBlocks","freeInodes","put","InodesList","owner","dateTime","Date","size","Folder","parentFolder","fullPath","base","inodeID","folderId","id","isBase","File","filename","extention","content","save","mapToClass","defineDB","count","a","add","toCollection","first","then","folder","offsetblockSize","update","ary","parentFolderPath","len","clearDbOnStart","dbCreator","pathFromArgs","editOrCreateFolder","parent","where","equals","inode","get","offsetBlockSize","offsetFreeInodes","editOrCreateFile","setContents","getFolder","getFile","modifyFileSystem","toArray","Promise","all","ino","newFolders","newFiles","removeFromFileSystem","listAllDirContents","freeInodesCommand","superblock","superBlockCommand","lsAll","window","handleRes","res","valid","setPromptSymbol","getFreeInodesContent","getSuperBlockContent","column","row","validPath","force","fileA","getFullName","basic","Error","App","justifyContent","alignItems","height","plugins","prompt","startState","allowTabs","backgroundColor","barColor","fontWeight","fontSize","closedTitle","closedMessage","msg","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bb64d082.chunk.js","sourcesContent":["export const version = '3.0.0';\nexport const displayName = 'PseudoFileSystem';\nexport const CURRENT_DIR = '.';\nexport const PARENT_DIR = '..';\nexport const HOME_DIR = '~';\nexport const STORAGE_KEY = 'TERMINAL_IN_REACT_PSEUDO_FILESYSTEM';\nexport const DIR = 'dir';\nexport const FILE = 'file';\n","import React from 'react'; // eslint-disable-line\nimport { PluginBase } from 'terminal-in-react'; // eslint-disable-line\nimport { autobind, decorate } from 'core-decorators';\nimport set from 'lodash.set';\nimport memoize from 'memoizerific';\nimport langMap from 'lang-map';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport * as syntaxStyles from 'react-syntax-highlighter/dist/styles';\nimport { displayName, version, CURRENT_DIR, PARENT_DIR, HOME_DIR } from './consts';\n\nconst DIR = 'dir';\nconst FILE = 'file';\nconst HOME_PATH = ['home', 'user'];\n\nfunction has(obj, key) {\n  return typeof obj[key] !== 'undefined';\n}\n\nexport default function configPlugin(pathSeporator = '/') {\n  function toStringPath(path) {\n    const stringParts = [...path.parts];\n    if (path.isDir) {\n      stringParts.push('');\n    }\n    if (path.isRoot) {\n      stringParts.unshift('');\n    }\n    return stringParts.join(pathSeporator);\n  }\n\n  @autobind\n  class PseudoFileSystem extends PluginBase {\n    static displayName = displayName;\n    static version = version;\n    static defaultData = {\n      name: pathSeporator,\n      type: DIR,\n      contents: {\n        home: {\n          name: 'home',\n          type: DIR,\n          contents: {\n            user: {\n              name: 'user',\n              type: DIR,\n              contents: {},\n            },\n          },\n        },\n      },\n    };\n\n    constructor(api, config) {\n      super(api, config);\n\n      this.currentPath = '';\n\n      const _ = [\n        `${pathSeporator}${HOME_PATH.join(pathSeporator)}${pathSeporator}`,\n      ];\n      setTimeout(() => {\n        this.enterDir().method({ _ });\n      });\n    }\n\n    commands = {\n      cd: this.enterDir(),\n      ls: this.listDirContents(),\n      rm: this.removeFromFileSystemCommand(),\n      mkdir: this.createDirCommand(),\n      touch: this.createFileCommand(),\n      cat: this.runCat(),\n      echo: this.runEcho(),\n    };\n\n    descriptions = {\n      cd: false,\n      ls: false,\n      rm: false,\n      mkdir: false,\n      touch: false,\n      cat: false,\n      echo: false,\n    };\n\n    getPublicMethods = () => ({\n      parsePath: this.parsePath,\n      isValidPath: (path, cb) => cb(this.isValidPath(path)),\n      createDir: this.createDir,\n      createFile: this.createFile,\n      removeDir: this.remove,\n      removeFile: this.remove,\n      readDir: (path, cb) => cb(this.getContents(path, true)),\n      readFile: (path, cb) => {\n        const file = this.getContents(path);\n        if (file !== null && typeof file === 'object') {\n          cb(file.contents);\n        } else {\n          cb(file);\n        }\n      },\n      writeFile: this.writeToFile,\n      pathToString: toStringPath,\n      types: {\n        dir: DIR,\n        file: FILE,\n      },\n    })\n\n    @decorate(memoize(500))\n    doParse(split, currentPath) { // eslint-disable-line class-methods-use-this\n      let isDir = false;\n      let isRoot = false;\n      const baseIsASymbol = [CURRENT_DIR, PARENT_DIR, HOME_DIR].indexOf(split[0]) > -1;\n      if (split[split.length - 1] === '' || (split.length === 1 && baseIsASymbol)) {\n        isDir = true;\n      }\n      if (split[0] === '') {\n        isRoot = true;\n      }\n      let modPath = split.filter(part => part.length !== 0);\n      if (!isRoot) {\n        if (modPath[0] === CURRENT_DIR) {\n          modPath = [...currentPath.parts, ...modPath.slice(1)];\n        } else if (modPath[0] === HOME_DIR) {\n          modPath = [...HOME_PATH, ...modPath.slice(1)];\n        } else if (modPath[0] === PARENT_DIR) {\n          modPath = [...currentPath.parts, ...modPath];\n        }\n      }\n\n      if (baseIsASymbol) {\n        isRoot = true;\n      }\n\n      for (let i = 0; i < modPath.length; i += 1) {\n        if (modPath[i] === CURRENT_DIR) {\n          modPath[i] = '';\n        } else if (modPath[i] === PARENT_DIR) {\n          if (i - 1 >= 0) {\n            modPath[i - 1] = '';\n          }\n          modPath[i] = '';\n        }\n      }\n      modPath = modPath.filter(part => part.length !== 0);\n\n      return {\n        parts: modPath,\n        isRoot,\n        isDir,\n      };\n    }\n\n    parsePath(path) {\n      const split = path.split(pathSeporator);\n      if (['', CURRENT_DIR, PARENT_DIR, HOME_DIR].indexOf(split[0]) < 0) {\n        split.unshift('.');\n      }\n      return this.doParse(split, this.currentPath);\n    }\n\n    isValidPath(path) {\n      const { parts } = path;\n      let last = this.api.getData();\n      for (let i = 0; i < parts.length; i += 1) {\n        if (has(last.contents, parts[i])) {\n          last = last.contents[parts[i]];\n        } else {\n          this.api.printLine(`Not a valid path: ${toStringPath(path)}`);\n          return false;\n        }\n      }\n      return true;\n    }\n\n    getContents(path, str = false) {\n      const { parts } = path;\n      if (this.isValidPath(path)) {\n        let last = this.api.getData();\n        for (let i = 0; i < parts.length; i += 1) {\n          if (has(last.contents, parts[i])) {\n            last = last.contents[parts[i]];\n          }\n        }\n        if (str && typeof last !== 'string') {\n          return ['.', '..', ...Object.keys(last)];\n        }\n        return last;\n      }\n      return null;\n    }\n\n    addToFileSystem({ parts }, data) {\n      const path = ['contents', ...parts.join('Ω…ΩcontentsΩ…Ω').split('Ω…Ω')];\n      this.api.setData(set(this.api.getData(), path, data));\n    }\n\n    enterDir() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            const newPath = this.parsePath(args._.join(' '));\n            if (this.isValidPath(newPath)) {\n              this.currentPath = newPath;\n              this.api.setPromptPrefix(`${toStringPath(this.currentPath)} `);\n            }\n          }\n        },\n      };\n    }\n\n    createDirCommand() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            const path = this.parsePath(args._[0]);\n            this.createDir(path);\n          }\n        },\n      };\n    }\n\n    createDir(path) {\n      const parentDir = path.parts.slice(0, path.parts.length - 2);\n      const newDir = path.parts[path.parts.length - 1];\n      const dir = this.getContents({ parts: parentDir });\n      if (dir !== null) {\n        if (!has(dir.contents, newDir)) {\n          this.addToFileSystem(path, {\n            name: newDir,\n            type: DIR,\n            contents: {},\n          });\n        }\n      }\n    }\n\n    createFileCommand() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            const path = this.parsePath(args._[0]);\n            this.createFile(path);\n          }\n        },\n      };\n    }\n\n    createFile(path) {\n      const parentDir = path.parts.slice(0, path.parts.length - 2);\n      if (this.isValidPath({ parts: parentDir })) {\n        const newFile = path.parts[path.parts.length - 1];\n        const dir = this.getContents({ parts: parentDir });\n        if (dir !== null) {\n          if (!has(dir.contents, newFile)) {\n            this.addToFileSystem(path, {\n              name: newFile,\n              type: FILE,\n              contents: '',\n            });\n          }\n        }\n      }\n    }\n\n    remove(path) {\n      const contents = this.getContents(path);\n      if (contents !== null && typeof contents !== 'undefined') {\n        this.addToFileSystem(path, undefined);\n      }\n    }\n\n    removeFromFileSystemCommand() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            const path = this.parsePath(args._.join(' '));\n            const contents = this.getContents(path);\n            if (contents !== null) {\n              if (\n                contents.type === DIR &&\n                Object.keys(contents.contents).length > 0 &&\n                !args.recursive\n              ) {\n                this.api.printLine(`${toStringPath(path)} is not empty`);\n              } else {\n                this.addToFileSystem(path, undefined);\n              }\n            }\n          }\n        },\n        options: [\n          {\n            name: 'recursive',\n            description: 'Each item in the folder as well',\n            defaultValue: false,\n          },\n          {\n            name: 'force',\n            description: 'Force the delete',\n            defaultValue: false,\n          },\n        ],\n      };\n    }\n\n    runCat() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            let split = args._;\n            if (args._.indexOf('>>') > 0) {\n              split = args._.join(' ').split('>>');\n            }\n            const pathA = this.parsePath(split[0].trim());\n            const file = this.getContents(pathA);\n            if (file !== null && file.type === FILE) {\n              if (args._.indexOf('>>') > 0) {\n                const pathB = this.parsePath(split[1].trim());\n                this.writeToFile(pathB, file.contents, { flag: 'a' });\n              } else {\n                const splitName = file.name.split('.');\n                const lang = langMap.languages(splitName[splitName.length - 1])[0];\n                this.api.printLine((\n                  <SyntaxHighlighter language={lang} style={syntaxStyles[lang]}>\n                    {file.contents}\n                  </SyntaxHighlighter>\n                ));\n              }\n            }\n          }\n        },\n      };\n    }\n\n    runEcho() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            if (args._.indexOf('>>') > -1) {\n              const split = args._.join(' ').split(' >> ');\n              const path = this.parsePath(split[1]);\n              this.writeToFile(path, split[0], { flag: 'a' });\n            }  else if (args._.indexOf('>') > -1) {\n              const split = args._.join(' ').split(' > ');\n              const path = this.parsePath(split[1]);\n              this.writeToFile(path, split[0], { flag: 'w' });\n            }else {\n              this.api.printLine(args._.join(' '));\n            }\n          }\n        },\n      };\n    }\n\n    writeToFile(path, contents = '', options = { flag: 'w' }) {\n      if (this.isValidPath(path)) {\n        const file = this.getContents(path);\n        if (file !== null && file.type === FILE) {\n          if (options.flag === 'w') {\n            file.contents = `${contents}`;\n          } else if (options.flag === 'a') {\n            file.contents += `\\n${contents}`;\n          }\n          this.addToFileSystem(path, file);\n        }\n      }\n    }\n\n    listDirContents() {\n      return {\n        method: (args) => {\n          const path = this.parsePath(args._[0] || '.');\n          if (path.isDir) {\n            const dir = this.getContents(path);\n            if (dir !== null) {\n              const contents = [\n                {\n                  name: '.',\n                  type: DIR,\n                },\n                {\n                  name: '..',\n                  type: DIR,\n                },\n                ...Object.values(dir.contents),\n              ];\n              this.api.printLine((\n                <span>\n                  {contents.filter(item => typeof item !== 'undefined').map((item) => {\n                    const styles = {\n                      color: '#bdc3c7',\n                      marginRight: 5,\n                      width: 'calc(33% - 5px)',\n                      display: 'inline-block',\n                    };\n                    if (contents.length > 3) {\n                      styles.marginBottom = 5;\n                    }\n                    if (item.type === DIR) {\n                      styles.color = '#2980b9';\n                    }\n                    return (\n                      <span\n                        style={styles}\n                        title={item.type.toUpperCase()}\n                        key={`${item.name}-${item.type}`}\n                      >\n                        {item.name}\n                      </span>\n                    );\n                  })}\n                </span>\n              ));\n            }\n          }\n        },\n      };\n    }\n  }\n\n  return PseudoFileSystem;\n}\n","import Dexie from 'dexie';\nimport { autobind } from 'core-decorators';\nimport { STORAGE_KEY, DIR, FILE } from './consts';\n\nfunction defineDB(pathSeporator) {\n  const db = new Dexie(STORAGE_KEY);\n\n  db.version(1).stores({\n    folders: '++id,&[id+path],folderId,fullPath',\n    files: '++id,&[folderId+filename],filename,extension,folderId,fullPath',\n    superBlock: '++id,blockSize,blocksTotal,fileSysSize,inodeListSize,freeBlocks,freeInodes',\n    inodesList: '++id,type,owner,dateTime,size'\n  });\n\n\n  @autobind\n  class SuperBlock {\n    constructor(\n      blockSize = 1024, blocksTotal = 1024,\n      fileSysSize = 1024 * 1024, inodeListSize = 8192,\n      freeBlocks = 1024 - 12, freeInodes = 8192) {\n      this.blockSize = blockSize;\n      this.blocksTotal = blocksTotal;\n      this.fileSysSize = fileSysSize;\n      this.inodeListSize = inodeListSize;\n      this.freeBlocks = freeBlocks;\n      this.freeInodes = freeInodes;\n    }\n\n    save() {\n      return db.superBlock.put(this);\n    }\n  }\n\n  @autobind\n  class InodesList {\n    constructor(\n      type,\n      owner='user',\n      dateTime=new Date(),\n      size=64\n    )\n       {\n      this.type = type;\n      this.owner = owner;\n      this.dateTime = dateTime;\n      this.size = size;\n    }\n\n    save() {\n      return db.inodesList.put(this);\n    }\n  }\n\n  @autobind\n  class Folder {\n    constructor(path, parentFolder = { fullPath: '' }, base = false, inodeID=0) {\n      this.path = path;\n      this.fullPath = parentFolder.fullPath + path + pathSeporator;\n      this.folderId = parentFolder.id;\n      this.type = DIR;\n      this.isBase = base;\n      this.inodeID = inodeID;\n    }\n\n    save() {\n      return db.folders.put(this);\n    }\n  }\n\n  @autobind\n  class File {\n    constructor(filename, extention, parentFolder, contents = '',inodeID=0) {\n      this.fullPath = `${parentFolder.fullPath + filename}.${extention}`;\n      this.filename = filename;\n      this.extention = extention;\n      this.folderId = parentFolder.id;\n      this.content = contents;\n      this.type = FILE;\n      this.inodeID = inodeID;\n    }\n\n    setContents(contents = '') {\n      this.content = contents;\n      this.save();\n    }\n\n    getFullName() {\n      return (this.filename || '') + (this.extention ? '.' : '') + (this.extention || '');\n    }\n\n    save() {\n      return db.files.put(this);\n    }\n  }\n\n  db.folders.mapToClass(Folder);\n  db.files.mapToClass(File);\n  db.superBlock.mapToClass(SuperBlock);\n  db.inodesList.mapToClass(InodesList);\n\n  return [db, Folder, File, SuperBlock, InodesList];\n}\n\nexport default function(pathSeporator, clear) {\n  if (clear) {\n    Dexie.delete(STORAGE_KEY);\n  }\n  const [db, Folder, File, SuperBlock, InodesList] = defineDB(pathSeporator);\n  db.superBlock.count(async count => {\n    if(count === 0){\n      let id = await db.superBlock.add(new SuperBlock());\n      if(id) {\n        \n        let inodeID = await db.inodesList.add(new InodesList(DIR));\n        if(inodeID) {\n          await db.folders.add(new Folder('', { fullPath: '' }, true, inodeID));\n          inodeID = 0;\n        }\n        \n        db.folders.toCollection().first().then(async item => {\n          let inodeID = await db.inodesList.add(new InodesList(DIR));\n          if(inodeID) {\n            await db.folders.add(new Folder('home', item, false, inodeID));\n            inodeID = 0;\n          }\n          inodeID = await db.inodesList.add(new InodesList(DIR));\n          if(inodeID){\n            await db.folders.add(new Folder('user', { fullPath: `${item.fullPath}home${pathSeporator}`, id: item.id + 1 }, false, inodeID)).then(folder => {\n              let offsetblockSize = (folder * 1024) + (16 * 3); //Cause we initialized three dirs.\n              let offsetFreeInodes = 8192 - (8 * 3);\n              db.superBlock.update(1, {\n                blockSize: offsetblockSize,\n                freeInodes: offsetFreeInodes\n              });\n            });\n          }\n        });\n      }\n    }\n  });\n\n  return [db, Folder, File, SuperBlock, InodesList];\n}\n","import React, { Fragment } from 'react'; // eslint-disable-line\nimport { PluginBase } from 'terminal-in-react'; // eslint-disable-line\nimport { autobind, decorate } from 'core-decorators';\nimport memoize from 'memoizerific';\nimport langMap from 'lang-map';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport * as syntaxStyles from 'react-syntax-highlighter/dist/styles';\nimport { displayName, version, CURRENT_DIR, PARENT_DIR, HOME_DIR, DIR, FILE } from './consts';\nimport dbCreator from './db';\n\nconst HOME_PATH = ['', 'home', 'user'];\n\nfunction last(ary) {\n  return ary[ary.length - 1];\n}\n\nfunction parentFolderPath(path) {\n  const len = path.length;\n  if (len - 1 <= 0) {\n    return { parts: [], isRoot: true, isDir: true };\n  }\n  return { parts: path.slice(0, len - 1), isRoot: true, isDir: true };\n}\n\nexport default function configPlugin(pathSeporator = '/', clearDbOnStart = false) {\n  const [db, Folder, File, SuperBlock, InodesList] = dbCreator(pathSeporator, clearDbOnStart);\n\n  function pathFromArgs(args, dir = false) {\n    let path = args._.join(' ').trim();\n    if (dir && last(path) !== pathSeporator) {\n      path += pathSeporator;\n    } else if (!dir && last(path) === pathSeporator) {\n      path = path.slice(0, path.length - 1);\n    }\n    return path;\n  }\n\n  function toStringPath(path) {\n    const stringParts = [...path.parts];\n    if (path.isDir) {\n      stringParts.push('');\n    }\n    if (path.isRoot) {\n      stringParts.unshift('');\n    }\n    return stringParts.join(pathSeporator);\n  }\n\n  function editOrCreateFolder(parent, name) {\n    db.folders.where('fullPath').equals(parent.fullPath + name + pathSeporator)\n    .count((count) => {\n      if (count === 0) {\n        db.inodesList.add(new InodesList(DIR)).then(inode => {\n          db.folders.add(new Folder(name, parent, false, inode)).then(folder => {\n            db.superBlock.get(1).then (function (superBlock) {\n              const { blockSize, freeInodes } = superBlock;\n              let offsetBlockSize = (blockSize + 1024) + 16;\n              let offsetFreeInodes = freeInodes - 8;\n              db.superBlock.update(1, {\n                blockSize: offsetBlockSize,\n                freeInodes: offsetFreeInodes\n              });\n            });\n          });\n        });\n      }\n    });\n  }\n\n  function editOrCreateFile(parent, name, content) {\n    const split = name.split('.');\n    const extention = last(split);\n    const filename = split.slice(0, split.length - 1).join('.');\n    db.files\n      .where('fullPath').equals(parent.fullPath + name)\n      .first((file) => {\n        if (typeof file === 'undefined') {\n          db.inodesList.add(new InodesList(FILE)).then(inode => {\n            db.files.add(new File(filename, extention, parent, content, inode)).then(file => {\n              db.superBlock.get(1).then(superBlock => {\n                const { blockSize, freeInodes } = superBlock;\n                let offsetBlockSize = (blockSize + 1024) + 16;\n                let offsetFreeInodes = freeInodes - 8;\n                db.superBlock.update(1, {\n                  blockSize: offsetBlockSize,\n                  freeInodes: offsetFreeInodes\n                });\n              });\n            });\n          });\n        } else {\n          file.setContents(content);\n        }\n      });\n  }\n\n  function getFolder(path, cb) {\n    const fullPath = toStringPath(path);\n    db.folders.where('fullPath').equals(fullPath).first(cb);\n  }\n\n  function getFile(path, cb) {\n    const fullPath = toStringPath(path);\n    db.files.where('fullPath').equals(fullPath).first(cb);\n  }\n\n  function modifyFileSystem({ parts, isDir }, data) {\n    if (parts.length > 0) {\n      getFolder(parentFolderPath(parts), (parent) => {\n        if (isDir) {\n          editOrCreateFolder(parent, last(parts));\n        } else {\n          editOrCreateFile(parent, last(parts), data);\n        }\n      });\n    }\n  }\n\n  function getContents(path, cb, str = false) {\n    if (path.isDir) {\n      getFolder(path, (folder) => {\n        if (typeof folder === 'undefined') {\n          cb(null);\n        } else if (str) {\n          let items = [];\n          \n          (async () => {\n            let folders = await db.folders.where('folderId').equals(folder.id).toArray((folders) => {\n              return folders;\n            });\n            let files = await db.files.where('folderId').equals(folder.id).toArray((files) => {\n              return files;\n            });\n\n            let newFolders = await Promise.all(folders.map(async folder => {\n              const { inodeID } = folder;\n              if(inodeID) {\n                let ino = await db.inodesList.where('id').equals(inodeID).first(ino => ino);\n                return {\n                  item: folder,\n                  ino\n                };\n              }\n            }));\n\n            let newFiles = await Promise.all(files.map(async file => {\n              const { inodeID } = file;\n              if(inodeID){\n                let ino = await db.inodesList.where('id').equals(inodeID).first(ino => ino);\n                return {\n                  item: file,\n                  ino\n                };\n              }\n            }));\n            cb([...newFolders, ...newFiles]);\n          })();\n\n          /* db.folders.where('folderId').equals(folder.id).toArray((folders) => {\n            db.files.where('folderId').equals(folder.id).toArray((files) => {\n              folders.map(folder => {\n                const { inodeID } = folder;\n                if(inodeID){\n                  db.inodesList.where('id').equals(inodeID).first(ino => {\n                    items.push({\n                      item: folder,\n                      ino\n                    });\n                    cb([...items]);\n                  });\n                }\n              })\n              files.map(file => {\n                const { inodeID } = file;\n                if(inodeID){\n                  db.inodesList.where('id').equals(inodeID).first(ino => {\n                    items.push({\n                      item: file,\n                      ino\n                    });\n                    cb([...items]);\n                  });\n                }\n              })\n            });\n          }); */\n        } else {\n          cb(folder);\n        }\n      });\n    } else {\n      getFile(path, (file) => {\n        if (typeof file === 'undefined') {\n          cb(null);\n        } else if (str) {\n          cb(file.content);\n        } else {\n          cb(file);\n        }\n      });\n    }\n  }\n\n  function removeFromFileSystem(path) {\n    getContents(path, (item) => {\n      if (item !== null) {\n        if (path.isDir) {\n          if (!item.isBase) {\n            db.folders.delete(item.id);\n          }\n        } else {\n          db.files.delete(item.id);\n        }\n      }\n    });\n  }\n\n\n  @autobind\n  class PseudoFileSystem extends PluginBase {\n    static displayName = displayName;\n    static version = version;\n\n    constructor(api, config) {\n      super(api, config);\n\n      this.currentPath = '';\n      window.commands = this.getPublicMethods;\n      window.pathFromArgs = pathFromArgs;\n      window.getContents = getContents;\n\n      const _ = [\n        `${pathSeporator}${HOME_PATH.join(pathSeporator)}${pathSeporator}`,\n      ];\n      this.enterDir().method({ _ });\n    }\n\n    commands = {\n      cd: this.enterDir(),\n      ls: this.listAllDirContents(),\n      /* lsAll: this.listAllDirContents(), */\n      freeInodes: this.freeInodesCommand(),\n      superblock: this.superBlockCommand(),\n      rm: this.removeFromFileSystemCommand(),\n      mkdir: this.createDirCommand(),\n      touch: this.createFileCommand(),\n      cat: this.runCat(),\n      echo: this.runEcho()\n    };\n\n    descriptions = {\n      cd: \"Change directory\",\n      ls: \"List all information of current directory\",\n      freeInodes: \"Get total free inodes\",\n      superblock: \"Get superblock information\",\n      lsAll: false,\n      rm: \"Remove a file or directory\",\n      mkdir: \"Make directory\",\n      touch: \"Create a file\",\n      cat: false,\n      echo: false,\n    };\n\n    getPublicMethods = () => ({\n      parsePath: this.parsePath,\n      isValidPath: this.isValidPath,\n      createDir: this.createDir,\n      createFile: this.createFile,\n      removeDir: this.remove,\n      removeFile: this.remove,\n      readDir: (path, cb) => this.getContents(path, cb, DIR, true),\n      readFile: (path, cb) => this.getContents(path, cb, FILE, true),\n      writeFile: this.writeToFile,\n      pathToString: toStringPath,\n      types: {\n        dir: DIR,\n        file: FILE,\n      },\n    })\n\n    @decorate(memoize(500))\n    doParse(split, currentPath) { // eslint-disable-line class-methods-use-this\n      let isDir = false;\n      let isRoot = false;\n      const baseIsASymbol = [CURRENT_DIR, PARENT_DIR, HOME_DIR].indexOf(split[0]) > -1;\n      if (split[split.length - 1] === '' || (split.length === 1 && baseIsASymbol)) {\n        isDir = true;\n      }\n      if (split[0] === '') {\n        isRoot = true;\n      }\n      let modPath = split.filter(part => part.length !== 0);\n      if (!isRoot) {\n        if (modPath[0] === CURRENT_DIR) {\n          modPath = [...currentPath.parts, ...modPath.slice(1)];\n        } else if (modPath[0] === HOME_DIR) {\n          modPath = [...HOME_PATH, ...modPath.slice(1)];\n        } else if (modPath[0] === PARENT_DIR) {\n          modPath = [...currentPath.parts, ...modPath];\n        }\n      }\n\n      if (baseIsASymbol) {\n        isRoot = true;\n      }\n\n      for (let i = 0; i < modPath.length; i += 1) {\n        if (modPath[i] === CURRENT_DIR) {\n          modPath[i] = '';\n        } else if (modPath[i] === PARENT_DIR) {\n          if (i - 1 >= 0) {\n            modPath[i - 1] = '';\n          }\n          modPath[i] = '';\n        }\n      }\n      modPath = modPath.filter(part => part.length !== 0);\n\n      return {\n        parts: modPath,\n        isRoot,\n        isDir,\n      };\n    }\n\n    parsePath(path) {\n      const split = path.split(pathSeporator);\n      if (['', CURRENT_DIR, PARENT_DIR, HOME_DIR].indexOf(split[0]) < 0) {\n        split.unshift('.');\n      }\n      return this.doParse(split, this.currentPath);\n    }\n\n    isValidPath(path, cb) {\n      const handleRes = (res) => {\n        if (typeof res === 'undefined') {\n          //this.api.printLine(`Not a valid path: ${toStringPath(path)}`);\n          //cb(false);\n          cb(true);\n        } else {\n          cb(true);\n        }\n      };\n      if (path.isDir) {\n        getFolder(path, handleRes);\n      } else {\n        getFile(path, handleRes);\n      }\n    }\n\n    getContents(path, cb, type, str = false) {\n      if ((type === DIR && path.isDir) || (type === FILE && !path.isDir)) {\n        this.isValidPath(path, (valid) => {\n          if (valid) {\n            getContents(path, cb, str);\n          } else {\n            cb(null);\n          }\n        });\n      } else {\n        cb(null);\n      }\n    }\n\n    enterDir() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            const newPath = this.parsePath(pathFromArgs(args, true));\n            this.isValidPath(newPath, (valid) => {\n              if (valid) {\n                this.currentPath = newPath;\n                this.api.setPromptSymbol(\"$\");\n                this.api.setPromptPrefix(`${toStringPath(this.currentPath)} `);\n              }\n            });\n          }\n        },\n      };\n    }\n\n    getFreeInodesContent(cb){\n      db.superBlock.get(1).then (superBlock => {\n        const { freeInodes, inodeListSize } = superBlock;\n        cb({ freeInodes, inodeListSize });\n      });\n    }\n\n    freeInodesCommand() {\n      return {\n        method: (args) => {\n          this.api.printLine(\n            <span>{\"FREE INODES                     SIZE INODE LIST\"}</span>\n          );\n\n          this.getFreeInodesContent(data => {\n            const { freeInodes, inodeListSize } = data;\n            this.api.printLine(\n              <span>\n                <span>\n                  {`    ${freeInodes}                                ${inodeListSize}`}\n                </span>\n              </span>\n            )\n          });\n        },\n      };\n    }\n\n    getSuperBlockContent(cb){\n      db.superBlock.get(1).then (superBlock => {\n        cb(superBlock);\n      });\n    }\n    superBlockCommand() {\n      return {\n        method: (args) => {\n          this.api.printLine(\n            <span style={{marginBottom: 15}}>{\"SUPER BLOCK\"}</span>\n          );\n\n          this.getSuperBlockContent(data => {\n            const { blockSize, fileSysSize, freeBlocks,\n                    freeInodes, inodeListSize } = data;\n            const column = {\n              width: 'calc(50% - 5px)',\n              display: 'inline-block'\n            };\n            const row = {\n              marginBottom: 5,\n              display: 'block'\n            }\n            this.api.printLine(\n              <Fragment>\n                <span style={row}>\n                  <span style={column}>\n                    Block size\n                  </span>\n                  <span style={column}>\n                    {blockSize}\n                  </span>\n                </span>\n\n                <span style={row}>\n                  <span style={column}>\n                    FileSystem Size\n                  </span>\n                  <span style={column}>\n                    {fileSysSize}\n                  </span>\n                </span>\n\n                <span style={row}>\n                  <span style={column}>\n                    Inode List Size\n                  </span>\n                  <span style={column}>\n                    {inodeListSize}\n                  </span>\n                </span>\n\n                <span style={row}>\n                  <span style={column}>\n                    Free blocks\n                  </span>\n                  <span style={column}>\n                    {freeBlocks}\n                  </span>\n                </span>\n\n                <span style={row}>\n                  <span style={column}>\n                    Free inodes\n                  </span>\n                  <span style={column}>\n                    {freeInodes}\n                  </span>\n                </span>\n              </Fragment>\n            )\n          });\n        },\n      };\n    }\n\n    createDirCommand() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            const path = this.parsePath(pathFromArgs(args, true));\n            this.createDir(path);\n          }\n        },\n      };\n    }\n\n    createDir(path) {\n      this.isValidPath(parentFolderPath(path.parts), (valid) => {\n        if (valid) {\n          modifyFileSystem(path);\n        }\n      });\n    }\n\n    createFileCommand() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            const path = this.parsePath(pathFromArgs(args));\n            this.createFile(path);\n          }\n        },\n      };\n    }\n\n    createFile(path) {\n      this.isValidPath(parentFolderPath(path.parts), (valid) => {\n        if (valid) {\n          modifyFileSystem(path, '');\n        }\n      });\n    }\n\n    remove(path) {\n      this.validPath(path, (valid) => {\n        if (valid) {\n          removeFromFileSystem(path);\n        }\n      });\n    }\n\n    removeFromFileSystemCommand() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            const path = this.parsePath(args._.join(' ').trim());\n            this.validPath(path, (valid) => {\n              if (valid) {\n                if (path.isDir) {\n                  this.getContents(path, (contents) => {\n                    if (contents.length > 0 && !args.recursive) {\n                      this.api.printLine(`${toStringPath(path)} is not empty`);\n                    } else if (contents.length > 0 && !args.force) {\n                      this.api.printLine(`${toStringPath(path)} is not empty`);\n                    } else {\n                      //this.remove(path);\n                    }\n                  }, DIR, true);\n                } else {\n                  //this.remove(path);\n                }\n              }\n            });\n          }\n        },\n        options: [\n          {\n            name: 'recursive',\n            description: 'Each item in the folder as well',\n            defaultValue: false,\n          },\n          {\n            name: 'force',\n            description: 'Force the delete',\n            defaultValue: false,\n          },\n        ],\n      };\n    }\n\n    runCat() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            let split = args._;\n            if (args._.indexOf('>>') > 0) {\n              split = args._.join(' ').split('>>');\n            }\n            const pathA = this.parsePath(pathFromArgs({ _: split[0].split(' ') }));\n            this.getContents(pathA, (fileA) => {\n              if (fileA !== null) {\n                if (args._.indexOf('>>') > 0) {\n                  const pathB = this.parsePath(pathFromArgs({ _: split[1].split(' ') }));\n                  this.writeToFile(pathB, fileA.content, { flag: 'a' });\n                } else {\n                  const lang = langMap.languages(fileA.extention || '')[0];\n                  this.api.printLine((\n                    <SyntaxHighlighter language={lang} style={syntaxStyles[lang]}>\n                      {fileA.content}\n                    </SyntaxHighlighter>\n                  ));\n                }\n              }\n            }, FILE);\n          }\n        },\n      };\n    }\n\n    runEcho() {\n      return {\n        method: (args) => {\n          if (args._.length > 0) {\n            if (args._.indexOf('>>') > -1) {\n              const split = args._.join(' ').split(' >> ');\n              const path = this.parsePath(pathFromArgs({ _: split[1].split(' ') }));\n              this.writeToFile(path, split[0], { flag: 'a' });\n            } else if (args._.indexOf('>') > -1) {\n              const split = args._.join(' ').split(' > ');\n              const path = this.parsePath(pathFromArgs({ _: split[1].split(' ') }));\n              this.writeToFile(path, split[0], { flag: 'w' });\n            } else {\n              this.api.printLine(args._.join(' '));\n            }\n          }\n        },\n      };\n    }\n\n    writeToFile(path, contents = '', options = { flag: 'w' }) {\n      this.isValidPath(path, (valid) => {\n        if (valid) {\n          this.getContents(path, (file) => {\n            if (file !== null) {\n              let content = file;\n              if (options.flag === 'w') {\n                content = `${contents}`;\n              } else if (options.flag === 'a') {\n                content += `\\n${contents}`;\n              }\n              modifyFileSystem(path, content);\n            }\n          }, FILE, true);\n        }\n      });\n    }\n\n    listDirContents() {\n      return {\n        method: (args) => {\n          const path = this.parsePath(pathFromArgs({ _: (args._.length > 0 ? args._ : ['.']) }, true));\n          if (path.isDir) {\n            this.getContents(path, (dir) => {\n              if (dir !== null) {\n                const contents = [\n                  {\n                    path: '.',\n                    type: DIR,\n                  },\n                  {\n                    path: '..',\n                    type: DIR,\n                  },\n                  ...dir,\n                ];\n                this.api.printLine((\n                  <span>\n                    {contents.map((item) => {\n                      const styles = {\n                        color: '#bdc3c7',\n                        marginRight: 5,\n                        width: 'calc(33% - 5px)',\n                        display: 'inline-block',\n                      };\n                      if (contents.length > 3) {\n                        styles.marginBottom = 5;\n                      }\n                      if (item.type === DIR) {\n                        styles.color = '#2980b9';\n                      }\n                      return (\n                        <span\n                          style={styles}\n                          title={item.type.toUpperCase()}\n                          key={`${item.fullPath}-${item.type}`}\n                        >\n                          {item.type === DIR ? item.path : (item.getFullName())}\n                        </span>\n                      );\n                    })}\n                  </span>\n                ));\n              }\n            }, DIR, true);\n          }\n        },\n      };\n    }\n\n    listAllDirContents() {\n      return {\n        method: (args) => {\n          const path = this.parsePath(pathFromArgs({ _: (args._.length > 0 ? args._ : ['.']) }, true));\n          if (path.isDir) {\n            this.getContents(path, async (dir) => {\n              if (dir !== null) {\n                /* const contents = [\n                  {\n                    path: '.',\n                    type: DIR,\n                  },\n                  {\n                    path: '..',\n                    type: DIR,\n                  },\n                  ...dir,\n                ]; */\n                const contents = dir;\n                this.api.printLine((\n                  <Fragment>\n                    {contents.length > 0 && (\n                      <span>{\"INODE      OWNER      TYPE        NAME\"}</span>\n                    )}\n                    <span>\n                      {contents.map((item) => {\n                        let keyID = 0;\n                        const { path, fullPath } = item.item;\n                        const { owner, type, id } = item.ino;\n\n                        const styles = {\n                          color: '#bdc3c7',\n                          marginRight: 5,\n                          width: 'calc(100% - 5px)',\n                          display: 'block',\n                        };\n                        if (contents.length > 3) {\n                          styles.marginBottom = 5;\n                        }\n                        if (type === DIR) {\n                          styles.color = '#2980b9';\n                        }\n                        \n\n                        keyID = keyID + 1;\n                        return (\n                          <span key={keyID}\n                          style={styles}\n                          title={type.toUpperCase()}\n                          key={`${fullPath}-${type}`}>\n                            {\n                              type === DIR ? (\n                                `${id}          ${owner}       ${type}         ${path}`\n                              ) : (\n                              `${id}          ${owner}       ${type}        ${item.item.getFullName()}`)\n                            }\n                          </span>\n                        )\n                      })}\n                    </span>\n                  </Fragment>\n                ));\n              }\n            }, DIR, true);\n          }\n        },\n      };\n    }\n  }\n\n  return PseudoFileSystem;\n}\n","import basic from './basic';\nimport db from './indexDb';\n\nexport default function configPlugin(pathSeporator = '/', type = 'basic', ...args) {\n  if (type === 'basic') {\n    return basic(pathSeporator, ...args);\n  } else if (type === 'db') {\n    return db(pathSeporator, ...args);\n  }\n  throw new Error(`The type \"${type}\" is not an available storage type`);\n}\n","import React, { Component } from 'react';\nimport Terminal from 'terminal-in-react';\n//import PseudoFileSystem from 'terminal-in-react-pseudo-file-system-plugin'\nimport PseudoFileSystem from './pseudo-system/index';\n//const FileSystemPlugin = PseudoFileSystem(\"/\", \"db\");\n\nclass App extends Component {\n  render() {\n    return (\n      <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"100vh\"\n          }}\n        >\n          <Terminal\n            plugins={[\n              new PseudoFileSystem(\"/\", \"db\")\n            ]}\n            prompt=\"white\"\n            startState=\"maximised\"\n            allowTabs={false}\n            color='white'\n            backgroundColor='black'\n            barColor='black'\n            style={{ fontWeight: \"bold\", fontSize: \"1em\" }}\n            descriptions={{\n            }}\n            closedTitle=\"¡Oh, oh! Cerraste la terminal\"\n            closedMessage=\"Da clic en el icono para volverla a abrir\"\n            msg=\"Escribe help para que veas los comandos disponibles\"\n          />\n        </div>\n    );   \n  }\n}\n\n/* function App() {\n  return (\n    <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"100vh\"\n        }}\n      >\n        <Terminal\n          plugins={[{\n            displayName: 'pseudo',\n            load: new PseudoFileSystem(\"/\", \"db\"),\n            commands: {\n              'type-algo': () => {\n                return 'type-algo yeah!'\n              }\n            },\n            descriptions: {\n              'type-algo': 'hello'\n            }\n          }]}\n          prompt=\"white\"\n          startState=\"maximised\"\n          allowTabs={false}\n          color='white'\n          backgroundColor='black'\n          barColor='black'\n          style={{ fontWeight: \"bold\", fontSize: \"1em\" }}\n          descriptions={{\n          }}\n          closedTitle=\"¡Oh, oh! Cerraste la terminal\"\n          closedMessage=\"Da clic en el icono para volverla a abrir\"\n          msg=\"Escribe help para que veas los comandos disponibles\"\n        />\n      </div>\n  );\n} */\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}